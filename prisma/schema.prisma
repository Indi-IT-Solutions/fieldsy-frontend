// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  FIELD_OWNER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum FieldType {
  PRIVATE
  PUBLIC
  TRAINING
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?
  image         String?
  role          UserRole  @default(USER)
  phone         String?
  bio           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  ownedFields   Field[]      @relation("FieldOwner")
  bookings      Booking[]
  reviews       Review[]
  favorites     Favorite[]
  payments      Payment[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Field {
  id              String    @id @default(cuid())
  name            String
  description     String
  address         String
  city            String
  state           String
  zipCode         String
  country         String    @default("US")
  latitude        Float?
  longitude       Float?
  ownerId         String
  type            FieldType @default(PRIVATE)
  size            String    // e.g., "Small", "Medium", "Large", "Extra Large"
  pricePerHour    Float
  pricePerDay     Float?
  amenities       String[]  // e.g., ["Water bowls", "Agility equipment", "Shade areas"]
  rules           String[]  // e.g., ["Dogs must be leashed", "Clean up after your dog"]
  images          String[]
  isActive        Boolean   @default(true)
  maxDogs         Int       @default(10)
  openingTime     String    // e.g., "08:00"
  closingTime     String    // e.g., "20:00"
  operatingDays   String[]  // e.g., ["Monday", "Tuesday", "Wednesday"]
  instantBooking  Boolean   @default(false)
  cancellationPolicy String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  owner           User      @relation("FieldOwner", fields: [ownerId], references: [id])
  bookings        Booking[]
  reviews         Review[]
  favorites       Favorite[]
  availability    FieldAvailability[]

  @@index([city, state])
  @@index([ownerId])
  @@map("fields")
}

model FieldAvailability {
  id         String   @id @default(cuid())
  fieldId    String
  date       DateTime
  startTime  String   // e.g., "09:00"
  endTime    String   // e.g., "17:00"
  isBlocked  Boolean  @default(false)
  reason     String?  // Reason for blocking
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  field      Field    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([fieldId, date, startTime, endTime])
  @@index([fieldId, date])
  @@map("field_availability")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String
  fieldId       String
  date          DateTime
  startTime     String        // e.g., "14:00"
  endTime       String        // e.g., "16:00"
  numberOfDogs  Int           @default(1)
  totalPrice    Float
  status        BookingStatus @default(PENDING)
  notes         String?
  cancellationReason String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user          User          @relation(fields: [userId], references: [id])
  field         Field         @relation(fields: [fieldId], references: [id])
  payment       Payment?
  review        Review?

  @@index([userId])
  @@index([fieldId])
  @@index([date, status])
  @@map("bookings")
}

model Payment {
  id                String   @id @default(cuid())
  bookingId         String   @unique
  userId            String
  amount            Float
  currency          String   @default("USD")
  status            String   // e.g., "pending", "completed", "failed", "refunded"
  paymentMethod     String   // e.g., "card", "paypal"
  stripePaymentId   String?
  stripeRefundId    String?
  refundAmount      Float?
  refundReason      String?
  processedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  booking           Booking  @relation(fields: [bookingId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@map("payments")
}

model Review {
  id          String   @id @default(cuid())
  bookingId   String   @unique
  userId      String
  fieldId     String
  rating      Int      // 1-5
  comment     String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  booking     Booking  @relation(fields: [bookingId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  field       Field    @relation(fields: [fieldId], references: [id])

  @@index([fieldId])
  @@index([userId])
  @@map("reviews")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  fieldId   String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  field     Field    @relation(fields: [fieldId], references: [id])

  @@unique([userId, fieldId])
  @@map("favorites")
}